{"version":3,"sources":["../js/main.js"],"names":["colors","turn","sequence","userResponse","i","speed","mode","squares","document","querySelectorAll","instructions","querySelector","middleRow","randomizer","random","Math","length","index","floor","push","addRandom","highlighter","color","currentSquare","id","classList","toggle","gameLoop","setTimeout","currentColor","innerHTML","playGame","console","log","readyButton","addEventListener","clickHandler","evt","guess","target","winTester","winHandler","lossHandler","reverseTester","clearResponses","updateLevel","count","reset","updateMode","pop","purple","getElementById","parentNode","removeChild","resetButton","speedUp","speedButton","reverseMode","reverseButton","addColor","div","createElement","add","appendChild","alert","addButton"],"mappings":"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","file":"main.374e0eef.map","sourceRoot":"../src/pug","sourcesContent":["//set up variables\nlet colors = [\n    'green',\n    'red',\n    'yellow',\n    'blue'\n]\nlet turn = 1\nlet sequence = []\nlet userResponse = []\nlet i = 0\nlet speed = 800\nlet mode = 'Standard'\nlet squares = document.querySelectorAll('.squares-container .game-square')\nlet instructions = document.querySelector('h4')\nlet middleRow = document.querySelector('.middle')\n\n//function to create random array of colors -----------------------------------------------------------\n\nconst randomizer = function () {\n    for (let i = 0; i < (turn + 2); i++) {\n        let random = Math.random()\n        let length = colors.length\n        let index = Math.floor(length * random)\n        sequence.push(colors[index])\n    }\n}\n\n// function to add a random color to the sequence ------------------------------------------------\n\nconst addRandom = function () {\n    let random = Math.random()\n    let length = colors.length\n    let index = Math.floor(length * random)\n    sequence.push(colors[index])\n}\n\n// toggle highlighted square in order of the sequence ------------------------------------------\nconst highlighter = function(color) {\n    let currentSquare = squares[0]\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i].id === color) {\n            currentSquare = squares[i]\n        }\n    }\n    currentSquare.classList.toggle('highlighted')\n\n}\n\nconst gameLoop = function () {\n    setTimeout( function () {\n        let currentColor = sequence[i]\n        highlighter(currentColor)\n        setTimeout( function () {\n            highlighter(currentColor)\n        }, speed)\n        setTimeout( function () {\n            if (mode === 'Standard') {\n                instructions.innerHTML = 'Now click the sequence of colors in the same order'\n            } else {\n                instructions.innerHTML = 'Now click the sequence of colors in the REVERSE order'\n            }\n        }, speed + (speed * sequence.length) + 100)\n        i++\n        if (i < sequence.length) {\n            gameLoop()\n        }\n   }, (speed + 250))\n}\n\nconst playGame = () => {\n    userResponse = []\n    instructions.innerHTML = 'Watch the sequence of colors...'\n    if (turn === 1) {\n        sequence = []\n        randomizer()\n    }\n    console.log(sequence)\n    i = 0\n    gameLoop()\n}\n\nlet readyButton = document.querySelector('.ready-container button')\nreadyButton.addEventListener('click', playGame)\n\n\n\n//now get the user's response -------------------------------------------------------------\n\nconst clickHandler = function (evt) {\n    let guess = evt.target.id\n    userResponse.push(guess)\n\n    highlighter(guess)\n    setTimeout(() => {highlighter(guess)}, 150)\n\n    if (userResponse.length >= sequence.length && mode === 'Standard') {\n        if (winTester(userResponse)) {\n            winHandler()\n        } else {\n            lossHandler()\n        }\n    }\n    if (userResponse.length >= sequence.length && mode === 'Reverse') {\n        if (reverseTester(userResponse)) {\n            winHandler()\n        } else {\n            lossHandler()\n        }\n    }\n}\n\nfor (let i = 0; i < squares.length; i++) {\n    squares[i].addEventListener('click', clickHandler)\n}\n\n//functions for handling a correct response or an incorrect response -------------------------------------------\n\nconst winHandler = function () {\n    setTimeout( () => {instructions.innerHTML = \"Correct! Press 'Ready' again to try the next level.\"}, 410)\n    clearResponses()\n    turn++\n    updateLevel()\n    addRandom()\n}\n\nconst lossHandler = function () {\n    if (turn != 1) {\n        setTimeout( () => {instructions.innerHTML = \"Not quite! Guess again, press 'Ready' to replay, or press 'Reset Game' to start over.\"}, 410)\n        clearResponses()\n    } else {\n        setTimeout( () => {instructions.innerHTML = \"Not quite! Guess again, or press 'Ready' to start over.\"}, 410)\n        clearResponses()\n    }\n}\n\n//now compare user's response to the sequence ----------------------------------------------------------\nconst winTester = function (userResponse) {\n    let count = 0\n    for (let i = 0; i < sequence.length; i++) {\n        if (userResponse[i] === sequence[i]) {\n            count++\n        }\n    }\n    return count === sequence.length\n}\n\n\n//functions to move the game forward or reset the game -----------------------------------------------\nconst clearResponses = () => {\n    userResponse = []\n}\n\nconst reset = function () {\n    clearResponses()\n    turn = 1\n    updateLevel()\n    sequence = []\n    speed = 800\n    mode = 'Standard'\n    updateMode()\n    instructions.innerHTML = \"Press 'Ready' to begin\"\n    if (colors.length > 4) {\n        colors.pop()\n        let purple = document.getElementById('purple')\n        purple.parentNode.removeChild(purple)\n\n    }\n}\n\nlet resetButton = document.querySelector('.reset-container button')\nresetButton.addEventListener('click', reset)\n\nconst updateLevel = function () {\n    let levelDisplay = document.querySelector('.level')\n    levelDisplay.innerHTML = turn\n}\n\n//make button to speed up the game ---------------------------------------------------------------------------\n\nconst speedUp = function () {\n    speed = speed * .5\n    console.log(speed)\n}\n\nlet speedButton = document.querySelector('.speed-container button')\nspeedButton.addEventListener('click', speedUp)\n\n//make button for reverse mode --------------------------------------------------------------------------------\n\nconst reverseTester = function (userResponse) {\n    let count = 0\n    for (let i = 0; i < sequence.length; i++) {\n        if (userResponse[i] === sequence[(sequence.length - (i + 1))]) {\n            count++\n        }\n    }\n    return count === sequence.length\n}\n\nconst reverseMode = () => {\n    mode = 'Reverse'\n    updateMode()\n    console.log('Reverse mode')\n    instructions.innerHTML = 'You are now in Reverse Mode'\n}\n\nlet reverseButton = document.querySelector('.reverse-container button')\nreverseButton.addEventListener('click', reverseMode)\n\nconst updateMode = () => {\n    let modeDisplay = document.querySelector('.mode')\n    modeDisplay.innerHTML = ` ${mode}`\n}\n\n\n//function to add color --------------------------------------------------------------------------------------\n\nconst addColor = function () {\n    if (colors.length === 4) {\n        colors.push('purple')\n        let div = document.createElement(\"DIV\")\n        div.classList.add('game-square')\n        div.id = 'purple'\n        middleRow.appendChild(div)\n        squares = document.querySelectorAll('.squares-container .game-square')\n        squares[3].addEventListener('click', clickHandler)\n    } else {\n        alert('Too many colors!')\n    }\n}\n\nlet addButton = document.querySelector('.add-container button')\naddButton.addEventListener('click', addColor)\n"]}